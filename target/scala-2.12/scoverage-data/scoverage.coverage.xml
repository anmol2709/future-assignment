<statements>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>17</id><start>414</start><end>483</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](these).++[java.io.File, Array[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))</description><symbolName>scala.collection.TraversableLike.++</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>8</id><start>337</start><end>337</end><line>13</line><description>scala.this.Array.canBuildFrom[java.io.Serializable]((ClassTag.apply[java.io.Serializable](classOf[java.lang.Object]): scala.reflect.ClassTag[java.io.Serializable]))</description><symbolName>scala.Array.canBuildFrom</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>11</id><start>423</start><end>450</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))</description><symbolName>scala.collection.TraversableLike.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>20</id><start>414</start><end>514</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).++[java.io.File, Array[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))).filter(((x$3: java.io.File) =&gt; x$3.isDirectory().unary_!))).toList</description><symbolName>scala.collection.TraversableOnce.toList</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>2</id><start>354</start><end>367</end><line>13</line><description>x$1.isDirectory()</description><symbolName>java.io.File.isDirectory</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>5</id><start>372</start><end>372</end><line>13</line><description>scala.this.Array.canBuildFrom[List[java.io.File]]((ClassTag.apply[List[java.io.File]](classOf[scala.collection.immutable.List]): scala.reflect.ClassTag[List[java.io.File]]))</description><symbolName>scala.Array.canBuildFrom</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>14</id><start>423</start><end>483</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))</description><symbolName>scala.collection.TraversableLike.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>4</id><start>378</start><end>404</end><line>13</line><description>getRecursiveListOfFiles(x)</description><symbolName>edu.knoldus.FutureFiles.getRecursiveListOfFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>13</id><start>458</start><end>458</end><line>14</line><description>scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File]))</description><symbolName>scala.Array.canBuildFrom</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>22</id><start>213</start><end>558</end><line>9</line><description>scala.concurrent.Future.apply[List[java.io.File]]({
  def getRecursiveListOfFiles(dir: java.io.File): List[java.io.File] = {
    val these: Array[java.io.File] = dir.listFiles();
    val list: Array[java.io.Serializable] = scala.Predef.refArrayOps[java.io.File](these).++[java.io.Serializable, Array[java.io.Serializable]](scala.Predef.refArrayOps[List[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).map[List[java.io.File], Array[List[java.io.File]]](((x: java.io.File) =&gt; getRecursiveListOfFiles(x)))(scala.this.Array.canBuildFrom[List[java.io.File]]((ClassTag.apply[List[java.io.File]](classOf[scala.collection.immutable.List]): scala.reflect.ClassTag[List[java.io.File]])))))(scala.this.Array.canBuildFrom[java.io.Serializable]((ClassTag.apply[java.io.Serializable](classOf[java.lang.Object]): scala.reflect.ClassTag[java.io.Serializable])));
    scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).++[java.io.File, Array[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))).filter(((x$3: java.io.File) =&gt; x$3.isDirectory().unary_!))).toList
  };
  getRecursiveListOfFiles(dir)
})(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>16</id><start>420</start><end>420</end><line>14</line><description>scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File]))</description><symbolName>scala.Array.canBuildFrom</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>7</id><start>341</start><end>405</end><line>13</line><description>scala.Predef.refArrayOps[List[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).map[List[java.io.File], Array[List[java.io.File]]](((x: java.io.File) =&gt; getRecursiveListOfFiles(x)))(scala.this.Array.canBuildFrom[List[java.io.File]]((ClassTag.apply[List[java.io.File]](classOf[scala.collection.immutable.List]): scala.reflect.ClassTag[List[java.io.File]]))))</description><symbolName>scala.Predef.refArrayOps</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>1</id><start>300</start><end>313</end><line>12</line><description>dir.listFiles()</description><symbolName>java.io.File.listFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>10</id><start>436</start><end>449</end><line>14</line><description>x$2.isDirectory()</description><symbolName>java.io.File.isDirectory</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>19</id><start>414</start><end>507</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).++[java.io.File, Array[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))).filter(((x$3: java.io.File) =&gt; x$3.isDirectory().unary_!))</description><symbolName>scala.collection.TraversableLike.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>18</id><start>492</start><end>506</end><line>14</line><description>x$3.isDirectory().unary_!</description><symbolName>scala.Boolean.unary_!</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>9</id><start>331</start><end>406</end><line>13</line><description>scala.Predef.refArrayOps[java.io.File](these).++[java.io.Serializable, Array[java.io.Serializable]](scala.Predef.refArrayOps[List[java.io.File]](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).map[List[java.io.File], Array[List[java.io.File]]](((x: java.io.File) =&gt; getRecursiveListOfFiles(x)))(scala.this.Array.canBuildFrom[List[java.io.File]]((ClassTag.apply[List[java.io.File]](classOf[scala.collection.immutable.List]): scala.reflect.ClassTag[List[java.io.File]])))))(scala.this.Array.canBuildFrom[java.io.Serializable]((ClassTag.apply[java.io.Serializable](classOf[java.lang.Object]): scala.reflect.ClassTag[java.io.Serializable])))</description><symbolName>scala.collection.TraversableLike.++</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>21</id><start>526</start><end>554</end><line>17</line><description>getRecursiveListOfFiles(dir)</description><symbolName>edu.knoldus.FutureFiles.getRecursiveListOfFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>3</id><start>341</start><end>368</end><line>13</line><description>scala.Predef.refArrayOps[java.io.File](these).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))</description><symbolName>scala.collection.TraversableLike.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>12</id><start>459</start><end>482</end><line>14</line><description>getRecursiveListOfFiles(dir)</description><symbolName>edu.knoldus.FutureFiles.getRecursiveListOfFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>15</id><start>423</start><end>483</end><line>14</line><description>scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$2: java.io.File) =&gt; x$2.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((dir: java.io.File) =&gt; getRecursiveListOfFiles(dir))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File]))))</description><symbolName>scala.Predef.refArrayOps</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</source><package>edu.knoldus</package><class>FutureFiles</class><classType>Object</classType><fullClassName>edu.knoldus.FutureFiles</fullClassName><method>getRecursiveListOfFiles</method><path>/home/knoldus/Future-assignment/src/main/scala/FutureFiles.scala</path><id>6</id><start>341</start><end>405</end><line>13</line><description>scala.Predef.refArrayOps[java.io.File](scala.Predef.refArrayOps[java.io.File](these).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).map[List[java.io.File], Array[List[java.io.File]]](((x: java.io.File) =&gt; getRecursiveListOfFiles(x)))(scala.this.Array.canBuildFrom[List[java.io.File]]((ClassTag.apply[List[java.io.File]](classOf[scala.collection.immutable.List]): scala.reflect.ClassTag[List[java.io.File]])))</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>